<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">ReleaseMerged</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6e94cd30-d29c-4199-9a57-1d7a4383598f}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <RootNamespace>daemaged.gitinfoplanter</RootNamespace>
    <AssemblyName>gitinfoplanter</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <Name>daemaged.gitinfoplanter</Name>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">..\</SolutionDir>
    <RestorePackages>true</RestorePackages>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <Tailcalls>false</Tailcalls>
    <OutputPath>bin\debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>3</WarningLevel>
    <DocumentationFile>bin\debug\daemaged.gitinfoplanter.xml</DocumentationFile>
    <StartArguments />
    <StartWorkingDirectory>
    </StartWorkingDirectory>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <Tailcalls>true</Tailcalls>
    <OutputPath>bin\release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>3</WarningLevel>
    <DocumentationFile>bin\release\daemaged.gitinfoplanter.xml</DocumentationFile>
    <StartArguments>--verbose --search-path "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0;;" --basedate 2000-01-01 --repo C:\projects\private\xxx.git C:\projects\private\xxx.git\gitinfoplanter.exe C:\projects\private\xxx.git\gitinfoplanter2.exe</StartArguments>
    <StartWorkingDirectory>C:\projects\private\daemaged.gitinfoplanter.git</StartWorkingDirectory>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <StartAction>Project</StartAction>
  </PropertyGroup>
  <PropertyGroup>
    <MinimumVisualStudioVersion Condition="'$(MinimumVisualStudioVersion)' == ''">11</MinimumVisualStudioVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'ReleaseMerged|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <Tailcalls>true</Tailcalls>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>3</WarningLevel>
    <DocumentationFile>bin\ReleaseMerged\daemaged.gitinfoplanter.xml</DocumentationFile>
    <StartArguments>--verbose --search-path "C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0;;" --basedate 2000-01-01 --repo C:\projects\private\xxx.git\ C:\projects\private\xxx.git\gitinfoplanter.exe</StartArguments>
    <StartWorkingDirectory>C:\projects\private\daemaged.gitinfoplanter.git</StartWorkingDirectory>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <OutputPath>bin\ReleaseMerged\</OutputPath>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)/Microsoft.FSharp.targets" Condition=" '$(OS)' == 'Unix' " />
  <Choose>
    <When Condition="'$(VisualStudioVersion)' == '11.0'">
      <PropertyGroup>
        <FSharpTargetsPath>$(MSBuildExtensionsPath32)\..\Microsoft SDKs\F#\3.0\Framework\v4.0\Microsoft.FSharp.Targets</FSharpTargetsPath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <FSharpTargetsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\FSharp\Microsoft.FSharp.Targets</FSharpTargetsPath>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Import Project="$(FSharpTargetsPath)" Condition="Exists('$(FSharpTargetsPath)')" />
  <ItemGroup>
    <Compile Include="assemblyinfo.fs" />
    <Compile Include="arg.fs" />
    <Compile Include="gitutils.fs" />
    <Compile Include="cmdlinefixer.fs" />
    <Compile Include="program.fs" />
    <None Include="gitutils-test.fsx" />
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="FSharp.Core">
      <HintPath>..\packages\FSharp.Core.3.0.0.2\lib\net40\FSharp.Core.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="ICSharpCode.SharpZipLib">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\ICSharpCode.SharpZipLib.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Cecil">
      <HintPath>..\packages\Mono.Cecil.0.9.5.4\lib\net40\Mono.Cecil.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Mdb">
      <HintPath>..\packages\Mono.Cecil.0.9.5.4\lib\net40\Mono.Cecil.Mdb.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Pdb">
      <HintPath>..\packages\Mono.Cecil.0.9.5.4\lib\net40\Mono.Cecil.Pdb.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Cecil.Rocks">
      <HintPath>..\packages\Mono.Cecil.0.9.5.4\lib\net40\Mono.Cecil.Rocks.dll</HintPath>
    </Reference>
    <Reference Include="Mono.Posix">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\Mono.Posix.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Security">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\Mono.Security.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Mono.Security.Win32">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\Mono.Security.Win32.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="mscorlib" />
    <Reference Include="NGit">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\NGit.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="NSch">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\NSch.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="policy.2.3.FSharp.Core">
      <HintPath>..\packages\FSharp.Core.3.0.0.2\lib\net40\policy.2.3.FSharp.Core.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Sharpen">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\Sharpen.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Sharpen.Unix">
      <HintPath>..\packages\ngit2.2.1.0.20130924\lib\net40\Sharpen.Unix.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Numerics" />
  </ItemGroup>
  <Import Project="$(SolutionDir)\.nuget\NuGet.targets" Condition="Exists('$(SolutionDir)\.nuget\NuGet.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('$(SolutionDir)\.nuget\NuGet.targets')" Text="$([System.String]::Format('$(ErrorText)', '$(SolutionDir)\.nuget\NuGet.targets'))" />
  </Target>  
  <Target Name="PlantVersionInfo" Condition=" '$(Configuration)' == 'ReleaseMerged' ">
    <Copy SourceFiles="$(TargetPath)" DestinationFiles="$(TargetDir)gitinfoplanter2.exe" />
    <Exec Command="$(TargetDir)gitinfoplanter2.exe --search-path &quot;$(TargetFrameworkDirectory)&quot; --basedate 2000-01-01 --repo $(ProjectDir) $(TargetPath) $(TargetPath)" />
    <Delete Files="$(TargetDir)gitinfoplanter2.exe" />
  </Target>
  <Target Name="Pack" Inputs="$(TargetPath)" Outputs="$(TargetDir)../$(AssemblyName).exe" Condition=" '$(Configuration)' == 'ReleaseMerged' ">
    <Exec Command="$(ProjectDir)../packages/ILRepack.1.22.2/tools/ILRepack.exe /wildcards /allowdup:Mono.Security.Cryptography.* /out:$(TargetDir)../$(AssemblyName).exe $(TargetPath) $(TargetDir)*.dll" />
  </Target>
  <Target Name="AfterBuild" DependsOnTargets="PlantVersionInfo;Pack" />
</Project>